name: clusters-aws-schedule

on:
  workflow_dispatch:
  # schedule:
  #   - cron: "1 1 * * */2"

permissions: read-all

jobs:
  scheduled-run-time-check:
    name: "Scheduled run time check"
    runs-on: ubuntu-latest
    outputs:
      scheduled_clusters: ${{ steps.scheduled_run.outputs.scheduled_clusters }}
      scheduled_clusters_matrix: ${{ steps.scheduled_run.outputs.scheduled_clusters_matrix }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get date
        id: date
        run: |
          set -euxo pipefail
          echo "DATE=$(date +%F -d '2 days ago')" | tee -a "${GITHUB_OUTPUT}"

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v36.0.9
        with:
          since: ${{ steps.date.outputs.DATE }}

      - name: Scheduled run time check
        id: scheduled_run
        run: |
          set -euxo pipefail

          ALL_CHANGED_FILES=" ${{ steps.changed-files.outputs.all_changed_files }}"
          echo "*** ALL_CHANGED_FILES: ${ALL_CHANGED_FILES}"

          # For each /terrafrom/<code> select one cluster which will be built
          SCHEDULED_CLUSTERS=""
          if [[ "${ALL_CHANGED_FILES}" =~ mgmt01.k8s.use1.dev.proj.aws.mylabs.dev|/aws-dev-mgmt/(group-variables.tfvars|flux/|argocd/)|\ flux/|\ argocd/|\ terraform/aws-mgmt/ ]] || [[ '${{ github.event_name }}' = 'workflow_dispatch' ]]; then
            SCHEDULED_CLUSTERS+="|mgmt01.k8s.use1.dev.proj.aws.mylabs.dev"
          fi

          if [[ "${ALL_CHANGED_FILES}" =~ ruzickap01.k8s.use1.dev.proj.aws.mylabs.dev|aws-dev-sandbox/group-variables.tfvars|\ terraform/aws-dev ]]; then
            SCHEDULED_CLUSTERS+="|ruzickap01.k8s.use1.dev.proj.aws.mylabs.dev"
          fi

          echo "*** SCHEDULED_CLUSTERS: ${SCHEDULED_CLUSTERS}"

          # github.event.repository.html_url can not be used when running as "scheduled"
          cat << EOF | tee payload-slack-content.json
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rocket: [$(date "+%F %R")] *<https://github.com/${{ github.repository }}|${{ github.repository }}>* | GH Actions: *<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>*\n<@U01S52AUB1A>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Scheduled Clusters*: ${SCHEDULED_CLUSTERS//|/\\\nâ€¢ }"
                  }
                }
              ]
            }
          EOF

          # In case no clusters were selected SCHEDULED_CLUSTERS_REGEXP is not going to be used, because SCHEDULED_CLUSTERS_MATRIX = '[]'
          SCHEDULED_CLUSTERS_REGEXP=".*(${SCHEDULED_CLUSTERS:1}).*"
          echo "SCHEDULED_CLUSTERS=${SCHEDULED_CLUSTERS_REGEXP}" >> "${GITHUB_ENV}"

          # This is workaround for: https://github.community/t/reusable-workflow-env-context-not-available-in-jobs-job-id-with/206111/3
          echo "SCHEDULED_CLUSTERS=${SCHEDULED_CLUSTERS_REGEXP}" | tee -a "${GITHUB_OUTPUT}"
          echo "SCHEDULED_CLUSTERS_MATRIX=$( echo -n "${SCHEDULED_CLUSTERS:1}" | jq -c -R -s 'split("|")' )" | tee -a "${GITHUB_OUTPUT}"

      - name: Send Slack message
        uses: slackapi/slack-github-action@v1.24.0
        if: ${{ steps.scheduled_run.outputs.SCHEDULED_CLUSTERS_MATRIX != '[]' }}
        with:
          payload-file-path: payload-slack-content.json
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  scheduled-create:
    needs: scheduled-run-time-check
    if: ${{ needs.scheduled-run-time-check.outputs.SCHEDULED_CLUSTERS_MATRIX != '[]' }}
    uses: ./.github/workflows/clusters-aws-reusable-workflow.yml
    permissions:
      contents: read
      id-token: write
    with:
      clusters: ${{ needs.scheduled-run-time-check.outputs.SCHEDULED_CLUSTERS }}
      terraform_action: apply
      env-variables: "'TF_LOG=ERROR' 'TF_DATA_DIR=.terraform'"
    secrets:
      CREATE_FLUX_DEPLOY_KEY_GITHUB_TOKEN: ${{ secrets.CREATE_FLUX_DEPLOY_KEY_GITHUB_TOKEN }}

  scheduled-check:
    name: "${{ matrix.stage }}"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    if: ${{ needs.scheduled-run-time-check.outputs.SCHEDULED_CLUSTERS_MATRIX != '[""]' }}
    needs: [scheduled-run-time-check, scheduled-create]
    strategy:
      # Do not cancel matrix jobs if one of them fails
      fail-fast: false
      matrix:
        stage: ${{ fromJSON(needs.scheduled-run-time-check.outputs.SCHEDULED_CLUSTERS_MATRIX) }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup Flux
        uses: fluxcd/flux2/action@main

      - name: Get and display environment variables
        run: |
          set -euxo pipefail

          get_variable_from_group_cluster_tfvars () {
            local CLUSTER_PATH="$1" TF_CODE_VARIABLE="$2" VARIABLE_HELPER
            if grep -q "${TF_CODE_VARIABLE}" "${CLUSTER_PATH}/cluster-variables.tfvars" ; then
              VARIABLE_HELPER=$(awk -F \" "/^${TF_CODE_VARIABLE}/ { print \$2 }" "${CLUSTER_PATH}/cluster-variables.tfvars")
            else
              VARIABLE_HELPER=$(awk -F \" "/^${TF_CODE_VARIABLE}/ { print \$2 }" "${CLUSTER_PATH}/../group-variables.tfvars")
            fi
            echo -e "\nVariable: \"${TF_CODE_VARIABLE^^}\" = \"${VARIABLE_HELPER}\""
            echo "${TF_CODE_VARIABLE^^}=${VARIABLE_HELPER}" >> "${GITHUB_ENV}"
            export "${TF_CODE_VARIABLE^^}=${VARIABLE_HELPER}"
            echo "${TF_CODE_VARIABLE^^}=${VARIABLE_HELPER}" | tee -a "${GITHUB_OUTPUT}"
          }

          CLUSTER_PATH=$(find clusters/*/*\.*\.* -maxdepth 0 -mindepth 0 -type d -regextype "posix-extended" -regex ".*${{ matrix.stage }}.*")

          get_variable_from_group_cluster_tfvars "${CLUSTER_PATH}" "aws_default_region"
          get_variable_from_group_cluster_tfvars "${CLUSTER_PATH}" "aws_assume_role"
          get_variable_from_group_cluster_tfvars "${CLUSTER_PATH}" "cluster_fqdn"
          echo "CLUSTER_NAME=${CLUSTER_FQDN%%.*}" | tee -a "${GITHUB_ENV}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          role-session-name: GitHubOidcFederatedRole
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Get kubeconfig
        run: |
          set -euxo pipefail
          export KUBECONFIG="/tmp/kubeconfig-${CLUSTER_NAME}.conf"
          echo "KUBECONFIG=${KUBECONFIG}" >> "${GITHUB_ENV}"
          aws eks update-kubeconfig --region "${AWS_DEFAULT_REGION}" --name "${CLUSTER_NAME}" --kubeconfig "${KUBECONFIG}"

      - name: ðŸ’¡ Check installed components
        run: |
          set -euxo pipefail
          kubectl wait helmrelease --for=condition=ready --all-namespaces --all --timeout=10m > /dev/null
          kubectl wait kustomization --for=condition=ready --all-namespaces --all --timeout=10m > /dev/null

      - name: Access Amazon EKS cluster and list nodes, Flux and ArgoCD details
        if: ${{ failure() }}
        run: |
          set -euxo pipefail
          kubectl get nodes -o wide --show-labels
          kubectl get namespaces
          flux get all -A --status-selector ready=false
          flux logs --all-namespaces --level=error
          flux get all --all-namespaces
          kubectl get applications,applicationsets -A || true

  scheduled-delete:
    needs: [scheduled-run-time-check, scheduled-check]
    if: ${{ needs.scheduled-run-time-check.outputs.SCHEDULED_CLUSTERS_MATRIX != '[]' }}
    uses: ./.github/workflows/clusters-aws-reusable-workflow.yml
    permissions:
      contents: read
      id-token: write
    with:
      # https://github.community/t/reusable-workflow-env-context-not-available-in-jobs-job-id-with/206111
      clusters: ${{ needs.scheduled-run-time-check.outputs.SCHEDULED_CLUSTERS }}
      terraform_action: destroy
      env-variables: "'TF_LOG=ERROR' 'TF_DATA_DIR=.terraform'"
    secrets:
      CREATE_FLUX_DEPLOY_KEY_GITHUB_TOKEN: ${{ secrets.CREATE_FLUX_DEPLOY_KEY_GITHUB_TOKEN }}
