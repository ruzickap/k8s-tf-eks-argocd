name: clusters-aws-schedule

on:
  workflow_dispatch:
  schedule:
    - cron: "2 2 * * */2"

env:
  # renovate: datasource=github-tags depName=kubernetes/kubectl extractVersion=^kubernetes-(?<version>.+)$
  KUBECTL_VERSION: "1.24.1"

jobs:
  scheduled-run-time-check:
    name: "Scheduled run time check"
    runs-on: ubuntu-latest
    outputs:
      scheduled_clusters: ${{ steps.scheduled_run.outputs.scheduled_clusters }}
      scheduled_clusters_matrix: ${{ steps.scheduled_run.outputs.scheduled_clusters_matrix }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v22.2

      - name: ðŸ’¡ Scheduled run time check
        id: scheduled_run
        run: |
          set -euxo pipefail

          ALL_CHANGED_FILES=" ${{ steps.changed-files.outputs.all_changed_files }}"
          echo "*** ALL_CHANGED_FILES: ${ALL_CHANGED_FILES}"

          SCHEDULED_CLUSTERS=""
          if [[ "${ALL_CHANGED_FILES}" =~ mgmt01.k8s.use1.dev.proj.aws.mylabs.dev|\ terraform/aws-mgmt ]]; then
            SCHEDULED_CLUSTERS+="|mgmt01.k8s.use1.dev.proj.aws.mylabs.dev"
          fi

          if [[ "${ALL_CHANGED_FILES}" =~ /mgmt02.k8s.use1.dev.proj.aws.mylabs.dev/|/aws-dev-mgmt2/(group-variables.tfvars|flux/|argocd/)|\ flux/|\ argocd/|\ terraform/aws-mgmt2/ ]]; then
            SCHEDULED_CLUSTERS+="|mgmt02.k8s.use1.dev.proj.aws.mylabs.dev"
          fi

          if [[ "${ALL_CHANGED_FILES}" =~ ruzickap01.k8s.use1.dev.proj.aws.mylabs.dev|aws-dev-sandbox/group-variables.tfvars|\ terraform/aws-dev ]]; then
            SCHEDULED_CLUSTERS+="|ruzickap01.k8s.use1.dev.proj.aws.mylabs.dev"
          fi

          echo "*** SCHEDULED_CLUSTERS: ${SCHEDULED_CLUSTERS}"

          cat > payload-slack-content.json << EOF
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rocket: *<${{ github.event.repository.html_url }}|${{ github.repository }}>* | *<${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}|GitHub Actions>*\n<@U01S52AUB1A>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Scheduled Clusters*: ${SCHEDULED_CLUSTERS//|/\\\nâ€¢ }"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Chnaged Files*: ${ALL_CHANGED_FILES// /\\\nâ€¢ }"
                  }
                }
              ]
            }
          EOF

          if [[ -n "${SCHEDULED_CLUSTERS}" ]]; then
            SCHEDULED_CLUSTERS=".*(${SCHEDULED_CLUSTERS:1}).*"
            echo "SCHEDULED_CLUSTERS=${SCHEDULED_CLUSTERS}" >> "${GITHUB_ENV}"
          fi

          # This is workaround for: https://github.community/t/reusable-workflow-env-context-not-available-in-jobs-job-id-with/206111/3
          echo "::set-output name=scheduled_clusters::${SCHEDULED_CLUSTERS}"
          echo "::set-output name=scheduled_clusters_matrix::$( echo -n "${SCHEDULED_CLUSTERS:1}" | jq -c -R -s 'split("|")')"

      - name: Send Slack message
        uses: slackapi/slack-github-action@v1.19.0
        if: ${{ steps.scheduled_run.outputs.scheduled_clusters_matrix != '[]' }}
        with:
          payload-file-path: payload-slack-content.json
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  scheduled-create:
    needs: scheduled-run-time-check
    if: ${{ needs.scheduled-run-time-check.outputs.scheduled_clusters_matrix != '[]' }}
    uses: ./.github/workflows/clusters-aws-reusable-workflow.yml
    with:
      clusters: ${{ needs.scheduled-run-time-check.outputs.scheduled_clusters }}
      terraform_action: apply
      env-variables: "'TF_LOG=ERROR' 'TF_DATA_DIR=.terraform'"
    secrets:
      CREATE_FLUX_DEPLOY_KEY_GITHUB_TOKEN: ${{ secrets.CREATE_FLUX_DEPLOY_KEY_GITHUB_TOKEN }}

  scheduled-check:
    name: "${{ matrix.stage }}"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    if: ${{ needs.scheduled-run-time-check.outputs.scheduled_clusters_matrix != '[""]' }}
    needs: [scheduled-run-time-check, scheduled-create]
    strategy:
      # Do not cancel matrix jobs if one of them fails
      fail-fast: false
      matrix:
        stage: ${{ fromJSON(needs.scheduled-run-time-check.outputs.scheduled_clusters_matrix) }}
    steps:
      - name: ðŸ’¡ðŸ”ª Check out repository code
        uses: actions/checkout@v3

      - name: ðŸ’¡ðŸ”ª Install necessary tools/packages
        run: |
          set -euxo pipefail
          sudo apt update -qq
          sudo apt-get install -y -qq curl gettext-base git jq unzip > /dev/null

          if ! command -v aws &> /dev/null; then
            curl -sL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
            unzip -q -o /tmp/awscliv2.zip -d /tmp/
            sudo /tmp/aws/install
          fi

      - name: Setup kubectl
        uses: azure/setup-kubectl@v2.1
        with:
          version: v${{ env.KUBECTL_VERSION }}

      - name: Setup Flux
        uses: fluxcd/flux2/action@main

      - name: ðŸ’¡ðŸ”ª Get and display environment variables
        run: |
          set -euxo pipefail

          get_variable_from_group_cluster_tfvars () {
            local CLUSTER_PATH="$1" TF_CODE_VARIABLE="$2" VARIABLE_HELPER
            if grep -q "${TF_CODE_VARIABLE}" "${CLUSTER_PATH}/cluster-variables.tfvars" ; then
              VARIABLE_HELPER=$(awk -F \" "/^${TF_CODE_VARIABLE}/ { print \$2 }" "${CLUSTER_PATH}/cluster-variables.tfvars")
            else
              VARIABLE_HELPER=$(awk -F \" "/^${TF_CODE_VARIABLE}/ { print \$2 }" "${CLUSTER_PATH}/../group-variables.tfvars")
            fi
            echo -e "\nðŸ’¡ Variable: \"${TF_CODE_VARIABLE^^}\" = \"${VARIABLE_HELPER}\""
            echo "${TF_CODE_VARIABLE^^}=${VARIABLE_HELPER}" >> "${GITHUB_ENV}"
            export "${TF_CODE_VARIABLE^^}=${VARIABLE_HELPER}"
            echo "::set-output name=${TF_CODE_VARIABLE^^}::${VARIABLE_HELPER}"
          }

          CLUSTER_PATH=$(find clusters -maxdepth 2 -mindepth 2 -type d -regextype "posix-extended" ! -regex '.*/(argocd|flux)' -regex ".*${{ matrix.stage }}.*")

          get_variable_from_group_cluster_tfvars "${CLUSTER_PATH}" "aws_default_region"
          get_variable_from_group_cluster_tfvars "${CLUSTER_PATH}" "aws_assume_role"
          get_variable_from_group_cluster_tfvars "${CLUSTER_PATH}" "cluster_fqdn"
          echo "CLUSTER_NAME=${CLUSTER_FQDN%%.*}" | tee -a "${GITHUB_ENV}"

      - name: ðŸ’¡ðŸ”ª Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          role-session-name: GitHubOidcFederatedRole
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: ðŸ’¡ Access Amazon EKS cluster and list nodes, Flux and ArgoCD details
        run: |
          set -euxo pipefail
          export KUBECONFIG="/tmp/kubeconfig-${CLUSTER_NAME}.conf"
          aws eks update-kubeconfig --region "${AWS_DEFAULT_REGION}" --name "${CLUSTER_NAME}" --kubeconfig "${KUBECONFIG}"
          kubectl get nodes -o wide --show-labels
          kubectl get namespaces
          flux get all --all-namespaces
          kubectl get applications,applicationsets -A || true

  scheduled-delete:
    needs: [scheduled-run-time-check, scheduled-check]
    if: ${{ needs.scheduled-run-time-check.outputs.scheduled_clusters_matrix != '[]' }}
    uses: ./.github/workflows/clusters-aws-reusable-workflow.yml
    with:
      # https://github.community/t/reusable-workflow-env-context-not-available-in-jobs-job-id-with/206111
      clusters: ${{ needs.scheduled-run-time-check.outputs.scheduled_clusters }}
      terraform_action: destroy
      env-variables: "'TF_LOG=ERROR' 'TF_DATA_DIR=.terraform'"
    secrets:
      CREATE_FLUX_DEPLOY_KEY_GITHUB_TOKEN: ${{ secrets.CREATE_FLUX_DEPLOY_KEY_GITHUB_TOKEN }}
